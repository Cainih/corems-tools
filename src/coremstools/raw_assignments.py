from pandas import DataFrame, read_csv, unique
from numpy import mean, std, array, zeros, shape, where, log10, average
from tqdm import tqdm
import dask.dataframe as dd

class Features:


    def __init__(self, csv_list, t_interval = 2, include_dispersity = True):
        
        self.csv_list: list = None         # list of .csv (full path) containing assignment results generated by CoreMS
        self.shared_columns: list = None
        self.averaged_cols: list = None

        self.t_int = t_interval
        self.include_dispersity = include_dispersity
        self.csv_list = csv_list

        self._results = {}

        self._build_results_dict()


    def CalculateDispersity(self):
        from pandas import DataFrame
        from corems.mass_spectra.input import rawFileReader

        def get_dispersity_rt(row, eics):

            mz = row['m/z']
            time = [row['Time'], row['Time'] + self.t_int]
            
            full_chroma = DataFrame({'EIC':eics[0][mz].eic, 'time':eics[0][mz].time})
            
            tsub_chroma = full_chroma[full_chroma['time'].between(time[0],time[1])]
            tsub_chroma.sort_values(by='EIC',ascending=False)
            tsub_chroma['cumulative'] = tsub_chroma.cumsum()['EIC']/tsub_chroma.sum()['EIC']

            n_points = len(tsub_chroma[tsub_chroma['cumulative']<0.5]+1)
            if n_points < 3:
                n_points = 3

            peak_chroma = tsub_chroma.head(n_points)

            d = peak_chroma['time'].std()
            t = average(peak_chroma['time'], weights=peak_chroma['EIC']) 

            return d, t
        

       
        file_list = self.csv_list

        for file in file_list:

            file_base = file.split('.csv')[0]

            parser = rawFileReader.ImportMassSpectraThermoMSFileReader(file_base + '.raw')

            assignments = read_csv(file)

            mzs = assignments['m/z'].drop_duplicates()

            eics = parser.get_eics(target_mzs=mzs, tic_data={}, peak_detection=False, smooth=False)

            assignments['Dispersity'], assignments['Retention Time'] = zip(*assignments.apply(get_dispersity_rt, args=(eics), axis=1))

            assignments.to_csv(file_base + '_d+rt.csv')


            



    def _build_results_dict(self):
        
        self.shared_columns = ['Time', 'Molecular Formula','mol_class', 'Ion Charge', 'Calculated m/z', 'Heteroatom Class',  'DBE']

        self.averaged_cols = ['m/z',
                    'm/z Error (ppm)',
                    'Calibrated m/z',
                    'Resolving Power',
                    'm/z Error Score',
                    'Isotopologue Similarity',
                    'Confidence Score',
                    'S/N']
        
        if self.include_dispersity:

            self.averaged_cols.append('Dispersity')
            
        
        for c in self.shared_columns:
            
            self._results[c] = {}
        
        self._results['N Samples'] = {}
        
        for c in self.averaged_cols:
            
            self._results[c] = {}
            
            self._results[c + ' stdev'] = {}



    def Align(self):
        
        self.elements = []
        
        for file in self.csv_list:
            
            print('aligning ' + file)   

            result = read_csv(file)
            
            result = result[result['Molecular Formula'].notnull()]
            
            result['feature'] = list(zip(result['Time'],result['Molecular Formula']))
            
            file_name = file.replace('.csv','').split('/')[-1]
            
            self._results['Intensity: '+ file_name] = {}

            pbar = tqdm(range(len(result)), ncols=100)

            for ix in pbar:

                row = result.iloc[ix,:]

                if row['feature'] not in self._results['Time'].keys():

                    for c in self.shared_columns:

                        self._results[c][row['feature']] = row[c]
                    
                    current_elements = [x.rstrip('0123456789') for x in row['Molecular Formula'].split()]

                    for element in current_elements:

                        if element not in self.elements:

                            self.elements.append(element)

                            self._results[element] = {}

                        self._results[element][row['feature']] = row[element]
                    
                    self._results['Intensity: ' + file_name][row['feature']] = int(row['Peak Height'])

                    for c in self.averaged_cols:

                        self._results[c][row['feature']] = [row[c]]
                    
                else:
                    
                    self._results['Intensity: ' + file_name][row['feature']] = int(row['Peak Height'])

                    for c in self.averaged_cols:

                        self._results[c][row['feature']].append(row[c])


        print('writing N Samples column')

        pbar = tqdm(self._results['m/z'].keys(), ncols=100)

        for key in pbar:

            self._results['N Samples'][key] = len(self._results['m/z'][key])
            
            for c in self.averaged_cols:
                
                self._results[c + ' stdev'][key] = std(self._results[c][key])

                self._results[c][key] = mean(self._results[c][key])

            
        self.results = DataFrame(self._results).fillna(0)

